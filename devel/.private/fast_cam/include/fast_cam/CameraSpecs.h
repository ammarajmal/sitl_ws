// Generated by gencpp from file fast_cam/CameraSpecs.msg
// DO NOT EDIT!


#ifndef FAST_CAM_MESSAGE_CAMERASPECS_H
#define FAST_CAM_MESSAGE_CAMERASPECS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fast_cam
{
template <class ContainerAllocator>
struct CameraSpecs_
{
  typedef CameraSpecs_<ContainerAllocator> Type;

  CameraSpecs_()
    : name()
    , model()
    , serial_number()
    , ip_address()
    , resolution()
    , frame_rate(0.0)
    , exposure_time(0.0)
    , gain()  {
    }
  CameraSpecs_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , model(_alloc)
    , serial_number(_alloc)
    , ip_address(_alloc)
    , resolution(_alloc)
    , frame_rate(0.0)
    , exposure_time(0.0)
    , gain(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_type;
  _model_type model;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _serial_number_type;
  _serial_number_type serial_number;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ip_address_type;
  _ip_address_type ip_address;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _resolution_type;
  _resolution_type resolution;

   typedef double _frame_rate_type;
  _frame_rate_type frame_rate;

   typedef double _exposure_time_type;
  _exposure_time_type exposure_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gain_type;
  _gain_type gain;





  typedef boost::shared_ptr< ::fast_cam::CameraSpecs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fast_cam::CameraSpecs_<ContainerAllocator> const> ConstPtr;

}; // struct CameraSpecs_

typedef ::fast_cam::CameraSpecs_<std::allocator<void> > CameraSpecs;

typedef boost::shared_ptr< ::fast_cam::CameraSpecs > CameraSpecsPtr;
typedef boost::shared_ptr< ::fast_cam::CameraSpecs const> CameraSpecsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fast_cam::CameraSpecs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fast_cam::CameraSpecs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fast_cam::CameraSpecs_<ContainerAllocator1> & lhs, const ::fast_cam::CameraSpecs_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.model == rhs.model &&
    lhs.serial_number == rhs.serial_number &&
    lhs.ip_address == rhs.ip_address &&
    lhs.resolution == rhs.resolution &&
    lhs.frame_rate == rhs.frame_rate &&
    lhs.exposure_time == rhs.exposure_time &&
    lhs.gain == rhs.gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fast_cam::CameraSpecs_<ContainerAllocator1> & lhs, const ::fast_cam::CameraSpecs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fast_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fast_cam::CameraSpecs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fast_cam::CameraSpecs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_cam::CameraSpecs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_cam::CameraSpecs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_cam::CameraSpecs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_cam::CameraSpecs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fast_cam::CameraSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d47430f74f6ea64f601ee2640f4e549";
  }

  static const char* value(const ::fast_cam::CameraSpecs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d47430f74f6ea64ULL;
  static const uint64_t static_value2 = 0xf601ee2640f4e549ULL;
};

template<class ContainerAllocator>
struct DataType< ::fast_cam::CameraSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fast_cam/CameraSpecs";
  }

  static const char* value(const ::fast_cam::CameraSpecs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fast_cam::CameraSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CameraSpecs.msg\n"
"string name\n"
"string model\n"
"string serial_number\n"
"string ip_address\n"
"string resolution\n"
"float64 frame_rate\n"
"float64 exposure_time\n"
"string gain\n"
;
  }

  static const char* value(const ::fast_cam::CameraSpecs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fast_cam::CameraSpecs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.model);
      stream.next(m.serial_number);
      stream.next(m.ip_address);
      stream.next(m.resolution);
      stream.next(m.frame_rate);
      stream.next(m.exposure_time);
      stream.next(m.gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraSpecs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fast_cam::CameraSpecs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fast_cam::CameraSpecs_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model);
    s << indent << "serial_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.serial_number);
    s << indent << "ip_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ip_address);
    s << indent << "resolution: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.resolution);
    s << indent << "frame_rate: ";
    Printer<double>::stream(s, indent + "  ", v.frame_rate);
    s << indent << "exposure_time: ";
    Printer<double>::stream(s, indent + "  ", v.exposure_time);
    s << indent << "gain: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAST_CAM_MESSAGE_CAMERASPECS_H

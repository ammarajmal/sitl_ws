// Generated by gencpp from file fast_cam/SetGainRequest.msg
// DO NOT EDIT!


#ifndef FAST_CAM_MESSAGE_SETGAINREQUEST_H
#define FAST_CAM_MESSAGE_SETGAINREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fast_cam
{
template <class ContainerAllocator>
struct SetGainRequest_
{
  typedef SetGainRequest_<ContainerAllocator> Type;

  SetGainRequest_()
    : gain(0.0)  {
    }
  SetGainRequest_(const ContainerAllocator& _alloc)
    : gain(0.0)  {
  (void)_alloc;
    }



   typedef double _gain_type;
  _gain_type gain;





  typedef boost::shared_ptr< ::fast_cam::SetGainRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fast_cam::SetGainRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGainRequest_

typedef ::fast_cam::SetGainRequest_<std::allocator<void> > SetGainRequest;

typedef boost::shared_ptr< ::fast_cam::SetGainRequest > SetGainRequestPtr;
typedef boost::shared_ptr< ::fast_cam::SetGainRequest const> SetGainRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fast_cam::SetGainRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fast_cam::SetGainRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fast_cam::SetGainRequest_<ContainerAllocator1> & lhs, const ::fast_cam::SetGainRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gain == rhs.gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fast_cam::SetGainRequest_<ContainerAllocator1> & lhs, const ::fast_cam::SetGainRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fast_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fast_cam::SetGainRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fast_cam::SetGainRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_cam::SetGainRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_cam::SetGainRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_cam::SetGainRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_cam::SetGainRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fast_cam::SetGainRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d53ba7b6907d06399427297847c2640";
  }

  static const char* value(const ::fast_cam::SetGainRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d53ba7b6907d063ULL;
  static const uint64_t static_value2 = 0x99427297847c2640ULL;
};

template<class ContainerAllocator>
struct DataType< ::fast_cam::SetGainRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fast_cam/SetGainRequest";
  }

  static const char* value(const ::fast_cam::SetGainRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fast_cam::SetGainRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SetGain.srv\n"
"# Request part\n"
"float64 gain\n"
;
  }

  static const char* value(const ::fast_cam::SetGainRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fast_cam::SetGainRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGainRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fast_cam::SetGainRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fast_cam::SetGainRequest_<ContainerAllocator>& v)
  {
    s << indent << "gain: ";
    Printer<double>::stream(s, indent + "  ", v.gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAST_CAM_MESSAGE_SETGAINREQUEST_H
